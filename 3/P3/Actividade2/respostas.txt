Actividade II
1. Considere o predicado minimo/3, que verifica se o terceiro argumento é o mínimo entre os dois primeiros:

minimo(X,Y,X) :- X =< Y.
minimo(X,Y,Y) :- Y =< X.

a) Qual é o "problema" com esta implementação? Proponha uma forma de o resolver.
AINDA NAO SEI?

2. Os predicados member/2 e memberchk/2 determinam se uma lista contém um determinado termo. Proponha implementações para estes predicados (chamando-lhes nomes diferentes, de forma a não fazer conflito com as versões nativas do interpretador).

(nota: a diferença entre member/2 e memberchk/2 é que o primeiro sucede tantas vezes quantas o termo for encontrado na lista, enquanto que o segundo sucede no máximo uma vez, assim que o termo for encontrado na lista)

3. Proponha uma implementação para um predicado nonmember/2, que faz o inverso dos anteriores.

4. O predicado is/2 é usado para fazer cálculos aritméticos:
is(X, 1+1)      % ou X is 1+1
	% X = 2
a) Verifique (e perceba) quais das seguintes queries são ou não válidas :

Note the syntax of is: either
<variable> is <expression>
or
<numeric constant> is <expression>
?- X is 3+5. - Válido (variable is expression)
?- 8 is 3+5. - Válido (numeric constant is expression)
?- (3+5) is (3+5). - Inválido ( expression is expression)
?- X is 3+a. - Inválido (variable is expression (can't evaluate a because it's not a number))
?- X is 3+Y. - Inválido ( variable is expression with undeclared variable
?- Y=1, X is 3+Y. - Vàlido ( variable is expression)

b) Implemente um predicado factorial/2 que sucede quando o segundo argumento é o factorial do primeiro.

c) Usou recursividade terminal (tail recursion)? (i.e., a chamada recursiva é a última?) Porque não?

d) Como pode reimplementar o predicado usando recursividade terminal?

5. Proponha implementações para os seguintes predicados:

a) sumlist/2 - soma os elementos de uma lista

% sumlist([1,2,3], X).    ----->> X = 6.

b) lenlist/2 - verifica o tamanho de uma lista
% lenlist([], X).    --------->> X = 0.
% lenlist([1,2,3,1], 4). -------->> true.
